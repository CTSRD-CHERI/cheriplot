#-
# Copyright (c) 2016 Alfredo Mazzinghi
# All rights reserved.
#
# This software was developed by SRI International and the University of
# Cambridge Computer Laboratory under DARPA/AFRL contract FA8750-10-C-0237
# ("CTSRD"), as part of the DARPA CRASH research programme.
#
# @BERI_LICENSE_HEADER_START@
#
# Licensed to BERI Open Systems C.I.C. (BERI) under one or more contributor
# license agreements.  See the NOTICE file distributed with this work for
# additional information regarding copyright ownership.  BERI licenses this
# file to you under the BERI Hardware-Software License, Version 1.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at:
#
#   http://www.beri-open-systems.org/legal/license-1-0.txt
#
# Unless required by applicable law or agreed to in writing, Work distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#
# @BERI_LICENSE_HEADER_END@
#

"""
This script produces a poiner provenance plot from a cheri trace file.
"""

import argparse as ap
import sys
import logging
import cProfile
import pstats

from cheriplot.core.tool import PlotTool
from cheriplot.plot.provenance import (
    ProvenanceTreePlot, AddressMapCapCreatePlot, AddressMapCapDerefPlot,
    PointedAddressFrequencyPlot, SyscallAddressMapPlot)

logger = logging.getLogger(__name__)

class ProvenancePlotTool(PlotTool):

    description = "Plot pointer provenance from cheri trace"

    def init_arguments(self):
        super().init_arguments()

        self.parser.add_argument("-m", "--vmmap-file",
                                 help="CSV file containing the VM map dump"
                                 " generated by procstat")

        sub = self.parser.add_subparsers(title="plot", help="plot-type --help")
        tree = sub.add_parser("tree",
                              help="Draw the part of the provenance tree "
                              "that contains a given capability")
        tree.add_argument("cycle", type=int,
                          help="cycle number of the capability to find")
        tree.set_defaults(handler=self._tree)

        asmap_bounds = sub.add_parser("asmap-bounds",
                                      help="Draw address-map plot with "
                                      "capability bounds setting operations")
        asmap_bounds.set_defaults(handler=self._asmap_bounds)
        asmap_deref = sub.add_parser("asmap-deref",
                                     help="Draw address-map plot with "
                                     "capability dereferences")
        asmap_deref.set_defaults(handler=self._asmap_deref)
        asmap_syscall = sub.add_parser("asmap-syscall",
                                       help="Draw address-map plot with "
                                       " capabilities returned by system calls")
        asmap_syscall.set_defaults(handler=self._asmap_syscall)
        pfreq = sub.add_parser("pfreq", help="Draw frequency of reference plot")
        pfreq.set_defaults(handler=self._pfreq)

    def _tree(self, args):
        plot = ProvenanceTreePlot(args.tree, args.trace, args.cache)
        plot.show()

    def _asmap_bounds(self, args):
        plot = AddressMapCapCreatePlot(args.trace, args.cache)
        if args.vmmap_file:
            plot.set_vmmap(args.vmmap_file)
        plot.show()

    def _asmap_deref(self, args):
        plot = AddressMapCapDerefPlot(args.trace, args.cache)
        if args.vmmap_file:
            plot.set_vmmap(args.vmmap_file)
        plot.show()

    def _asmap_syscall(self, args):
        plot = SyscallAddressMapPlot(args.trace, args.cache)
        if args.vmmap_file:
            plot.set_vmmap(args.vmmap_file)
        plot.show()

    def _pfreq(self, args):
        plot = PointedAddressFrequencyPlot(args.trace, args.cache)
        if args.vmmap_file:
            plot.set_vmmap(args.vmmap_file)
        plot.show()

    def _run(self, args):
        if args.outfile:
            plot.plot_file = args.outfile
        args.handler(args)


def main():
    tool = ProvenancePlotTool()
    tool.run()

if __name__ == "__main__":
    main()
